// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    /*
        Here's the idea, if zx == 0, it will directly pass down the x
        towards nx check/nx mux, where we have 2 inputs, one is the zxOut
        which is currently holding value of x, and another one is Not of zxOut
        To get the not of zxOut as another input, and then it will choose based on the
        nx value, in this case it will be nx=1, which means it will not of zxOut (notzxOut) which again
        currently holds the value of x, which means it will not the original value of x

        Similarly zy == 1, which means it will instead send the false value through zyOut, meaning all 0, 
        now ny = 0, which means it will send the zyOut, as it is, which holds 0 currently.

        Now we have both the inputs, ready to go for next operation, which is f
        now f has two operations one is addition and one is AND, 
        So we feed both the nxOut and nyOut into Add16 and And16, to get both of their respective outputs
        next we can use f as a selector which will select between which one to choose
        in this case f == 1, whcih means it will choose the addition.

        Next we have no operation, which just Not the Output of fOut, meaning again we have 1 not16 
        which will give us notfOut, and another input will fout itself.
    */



    // zx == 1 -> x = 0000
    // zx == 0 -> x remains as it is (which then can be fed with nx)
    // same for y
    Mux16(a=x , b=false , sel=zx , out=zxOut ); /* zx == 1 / zx == 0 -> zxOut */
    Mux16(a=y, b=false, sel=zy, out=zyOut); /* zy == 1 / zy == 0 -> zyOut */
    
    // Not of zxOut and zyOut to feed into another input of nx/ny selection MUX along with zxOut, zyOut directly
    Not16(in=zxOut , out=notzxOut );
    Not16(in=zyOut , out=notzyOut );
    Mux16(a=zxOut, b=notzxOut, sel=nx, out=nxOut);
    Mux16(a=zyOut, b=notzyOut, sel=ny, out=nyOut);

    // f selection mux, 
    Add16(a=nxOut, b=nyOut, out=addOut);
    And16(a=nxOut, b=nyOut, out=andOut); 
    Mux16(a=andOut, b=addOut, sel=f , out=fOut);

    // no selection mux
    // similarly for ng would be the most significant bit since its in 2's complement
    // so it would out[15] since in majority of hdl simulator bits are counted from left to right, so in that way rightmost bit is LSB, and left most is MSB
    /*
    Bit Position:  15 14 13 12 11 10  9  8  7  6  5  4  3  2  1  0
    out:            0  0  0  0  0  0  0  0  0  1  0  1  0  1  0  1
    */ 
    Not16(in=fOut, out=notfOut); // not of fOut
    Mux16(a=fOut, b=notfOut, sel=no, out=out,out[0..7]=out1, out[8..15]=out2,out[15]=ng);

    // Now here's a little problem, we have to split the output into 2 parts
    // because there's no Or16Way, and we need 1bit output out of the OR gate
    // as shown in the Or8Way impletmentation, it was a singlebit output.
    /*
        Or(a=in[0], b=in[1], out=out01);
    Or(a=in[2], b=in[3], out=out23);
    Or(a=in[4], b=in[5], out=out45);
    Or(a=in[6], b=in[7], out=out67);
    Or(a=out01, b=out23, out=out0123);
    Or(a=out45, b=out67, out=out4567);
    Or(a=out0123, b=out4567, out=out);
    */

    // Now going back to the understanding, since Or8Way is implemented that way, we can really check between each of the bits of the input, meaning a bitwise OR, we need a bitwise OR because, then we would really be able to determine whether all of the inputjs are 0 or 1, and if we just try to OR between the same input it wouldn't help much since the input likely contains a lot of 0 and 1.

    // Now if we divide these into 2 parts, we will be able to get a single orOutput from each of the Or operation, and then we can just do a simple 1 bit OR to check whether both of those are 0 or any of the bits are 1.

    // and then lets say our orOut1 = 1, orOut1 = 0, it would return 1 on the finalOrOut, but that would make zr 1, which why we would use a not gate to negate that, similarly if we have both orOut1, and orOut2 = 0, we would get 0, which isn't what we want, so hence not gate.

    Or8Way(in=out1,out=orOut1);
    Or8Way(in=out2,out=orOut2);
    Or(a=orOut1,b=orOut2,out=finalOrOut);
    Not(in=finalOrOut,out=zr);


}
